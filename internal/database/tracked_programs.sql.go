// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tracked_programs.sql

package database

import (
	"context"
	"database/sql"
)

const addProgram = `-- name: AddProgram :exec
INSERT INTO tracked_programs (name)
VALUES (?)
`

func (q *Queries) AddProgram(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, addProgram, name)
	return err
}

const getAllPrograms = `-- name: GetAllPrograms :many
SELECT id, name, lifetime_seconds FROM tracked_programs
`

func (q *Queries) GetAllPrograms(ctx context.Context) ([]TrackedProgram, error) {
	rows, err := q.db.QueryContext(ctx, getAllPrograms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TrackedProgram
	for rows.Next() {
		var i TrackedProgram
		if err := rows.Scan(&i.ID, &i.Name, &i.LifetimeSeconds); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProgramByName = `-- name: GetProgramByName :one
SELECT id, name, lifetime_seconds FROM tracked_programs
WHERE name = ?
`

func (q *Queries) GetProgramByName(ctx context.Context, name string) (TrackedProgram, error) {
	row := q.db.QueryRowContext(ctx, getProgramByName, name)
	var i TrackedProgram
	err := row.Scan(&i.ID, &i.Name, &i.LifetimeSeconds)
	return i, err
}

const removeAllPrograms = `-- name: RemoveAllPrograms :exec
DELETE FROM tracked_programs
`

func (q *Queries) RemoveAllPrograms(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, removeAllPrograms)
	return err
}

const removeProgram = `-- name: RemoveProgram :exec
DELETE FROM tracked_programs
WHERE name = ?
`

func (q *Queries) RemoveProgram(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, removeProgram, name)
	return err
}

const updateLifetime = `-- name: UpdateLifetime :exec
UPDATE tracked_programs
SET lifetime_seconds = lifetime_seconds + ?
WHERE id = ?
`

type UpdateLifetimeParams struct {
	LifetimeSeconds sql.NullInt64
	ID              int64
}

func (q *Queries) UpdateLifetime(ctx context.Context, arg UpdateLifetimeParams) error {
	_, err := q.db.ExecContext(ctx, updateLifetime, arg.LifetimeSeconds, arg.ID)
	return err
}

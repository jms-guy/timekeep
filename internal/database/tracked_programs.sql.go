// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: tracked_programs.sql

package database

import (
	"context"
	"database/sql"
)

const addProgram = `-- name: AddProgram :exec
INSERT OR IGNORE INTO tracked_programs (name, category, project)
VALUES (?, ?, ?)
`

type AddProgramParams struct {
	Name     string
	Category sql.NullString
	Project  sql.NullString
}

func (q *Queries) AddProgram(ctx context.Context, arg AddProgramParams) error {
	_, err := q.db.ExecContext(ctx, addProgram, arg.Name, arg.Category, arg.Project)
	return err
}

const getAllProgramNames = `-- name: GetAllProgramNames :many
SELECT name FROM tracked_programs
`

func (q *Queries) GetAllProgramNames(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAllProgramNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPrograms = `-- name: GetAllPrograms :many
SELECT id, name, lifetime_seconds, category, project FROM tracked_programs
`

func (q *Queries) GetAllPrograms(ctx context.Context) ([]TrackedProgram, error) {
	rows, err := q.db.QueryContext(ctx, getAllPrograms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TrackedProgram
	for rows.Next() {
		var i TrackedProgram
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LifetimeSeconds,
			&i.Category,
			&i.Project,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProgramByName = `-- name: GetProgramByName :one
SELECT id, name, lifetime_seconds, category, project FROM tracked_programs
WHERE name = ?
`

func (q *Queries) GetProgramByName(ctx context.Context, name string) (TrackedProgram, error) {
	row := q.db.QueryRowContext(ctx, getProgramByName, name)
	var i TrackedProgram
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LifetimeSeconds,
		&i.Category,
		&i.Project,
	)
	return i, err
}

const removeAllPrograms = `-- name: RemoveAllPrograms :exec
DELETE FROM tracked_programs
`

func (q *Queries) RemoveAllPrograms(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, removeAllPrograms)
	return err
}

const removeProgram = `-- name: RemoveProgram :exec
DELETE FROM tracked_programs
WHERE name = ?
`

func (q *Queries) RemoveProgram(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, removeProgram, name)
	return err
}

const resetAllLifetimes = `-- name: ResetAllLifetimes :exec
UPDATE tracked_programs 
SET lifetime_seconds = 0
`

func (q *Queries) ResetAllLifetimes(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetAllLifetimes)
	return err
}

const resetLifetimeForProgram = `-- name: ResetLifetimeForProgram :exec
UPDATE tracked_programs 
SET lifetime_seconds = 0 
WHERE name = ?
`

func (q *Queries) ResetLifetimeForProgram(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, resetLifetimeForProgram, name)
	return err
}

const updateCategory = `-- name: UpdateCategory :exec
UPDATE tracked_programs
SET category = ?
WHERE name = ?
`

type UpdateCategoryParams struct {
	Category sql.NullString
	Name     string
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateCategory, arg.Category, arg.Name)
	return err
}

const updateLifetime = `-- name: UpdateLifetime :exec
UPDATE tracked_programs
SET lifetime_seconds = lifetime_seconds + ?
WHERE name = ?
`

type UpdateLifetimeParams struct {
	LifetimeSeconds int64
	Name            string
}

func (q *Queries) UpdateLifetime(ctx context.Context, arg UpdateLifetimeParams) error {
	_, err := q.db.ExecContext(ctx, updateLifetime, arg.LifetimeSeconds, arg.Name)
	return err
}

const updateProject = `-- name: UpdateProject :exec
UPDATE tracked_programs
SET project = ?
WHERE name = ?
`

type UpdateProjectParams struct {
	Project sql.NullString
	Name    string
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.ExecContext(ctx, updateProject, arg.Project, arg.Name)
	return err
}
